# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13U92SV-eluNmuufpVDtrd__d9VHzvgvO
"""

import os
import numpy as np
import pandas as pd
from pandas import datetime
from datetime import datetime
from datetime import date
import calendar
import matplotlib.pyplot as plt
import seaborn as sn
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

train=pd.read_csv('train.csv')
test=pd.read_csv('test.csv')

train.shape, test.shape

test.tail()

train.tail()

sn.heatmap(train.corr())

sn.heatmap(test.corr())

sn.distplot(train["count"])

sn.distplot(np.log(train["count"]))

sn.distplot(train["registered"])

train.isnull().sum()

test.isnull().sum()

# extracting date, hour and month from the datetime
train["date"] = train.datetime.apply(lambda x : x.split()[0])
train["hour"] = train.datetime.apply(lambda x : x.split()[1].split(":")[0])
train["month"] = train.date.apply(lambda dateString : datetime.strptime(dateString,"%d-%m-%Y").month)

train["datetime"]

train=pd.read_csv('train.csv')
test=pd.read_csv('test.csv')
training, validation = train_test_split(train, test_size = 0.2, random_state = 0)

training.head()

validation.shape

train = train.drop(['datetime', 'atemp'],axis=1)
test = test.drop(['datetime', 'atemp'], axis=1)
training = training.drop(['datetime', 'atemp'],axis=1)
validation = validation.drop(['datetime', 'atemp'],axis=1)

X_train = training.drop('count', 1)
y_train = np.log(training['count'])
X_val = validation.drop('count', 1)
y_val = np.log(validation['count'])

X_train.shape, y_train.shape, X_val.shape, y_val.shape

from sklearn.tree import DecisionTreeRegressor

dt_reg = DecisionTreeRegressor(max_depth=5)

dt_reg.fit(X_train, y_train)

predict = dt_reg.predict(X_val)

def rmsle(y, y_):
    y = np.exp(y), 
    y_ = np.exp(y_)
    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y]))
    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_]))
    calc = (log1 - log2) ** 2
    return np.sqrt(np.mean(calc))

rmsle(y_val, predict)

test_prediction = dt_reg.predict(test)

final_prediction = np.exp(test_prediction)
final_prediction

submission = pd.DataFrame()

submission['count'] = final_prediction.astype(int)

print("Submission")
submission

test.insert(9, "rentedbikes", submission["count"], True)

final_table = test

final_table.tail()

sn.distplot((final_table["rentedbikes"]))

from sklearn.externals import joblib
# saving model

filename = 'finalized_model.sav'
joblib.dump(dt_reg, filename)


#load model
loaded_model = joblib.load(filename)

def getPredict(season=0, holiday=0,	workingday=0,	weather=0,	temp=0,	humidity=0,	windspeed=0,	casual=0,	registered=0):
  data = [[season, holiday, workingday, weather, temp, humidity, windspeed, casual, registered]]
  df = pd.DataFrame(data, columns = ['season', 'holiday', 'workingday', 'weather', 'temp', 'humidity', 'windspeed', 'casual', 'registered'])
  filename = 'finalized_model.sav'
  loaded_model = joblib.load(filename)
  log = loaded_model.predict(df)
  result = np.exp(log[0])
  return int(result)
